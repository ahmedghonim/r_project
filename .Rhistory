source("~/Projects/R/api.R")
source("~/Projects/R/api.R")
status <- function(){
list(
status = "API Runing"
)
}
library(plumber)
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumber::plumb(file='api.R')$run()
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("tidyverse")
plumber::plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
install.packages("tidyverse")
plumb(file='api.R')$run()
plumber::plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
install_version("utilities", version = "0.6.1", repos = "http://cran.us.r-project.org")
install.packages("devtools")
library(devtools)
plumber::plumb(file='api.R')$run()
library(plumber)
library(tidyverse)
library(uxstats)
library(jsonlite)
library(DBI)
library(readxl)
library(openxlsx)
library(meta)
library(utilities)
mydb <- dbConnect(RSQLite::SQLite(), "./routes/globals.sqlite")
#Prepare Labs
labs_raw <- read_excel("labs_raw.xlsx", sheet = "Sheet2")
write.xlsx(rbind(
labs_raw%>%transmute(Conversion= paste0(Analyte, " (",Traditional, "->", SI,")"), ratio=toSI),
labs_raw%>%transmute(Conversion= paste0(Analyte," (",SI,"->", Traditional,")"), ratio=toTraditional)
)%>%arrange(Conversion),file = "labs.xlsx", rowNames = FALSE, sheetName="Labs")
#Create db from globals.xlsx
available <- read_excel("globals.xlsx",
sheet = "Input") %>%
mutate(
across(everything(), ~replace_na(.x, 0))
)
mandatory <- read_excel("globals.xlsx",
sheet = "Mandatory") %>%
mutate(
across(everything(), ~replace_na(.x, 0))
) %>% rowid_to_column(var="ID")
output_df <- read_excel("globals.xlsx",
sheet = "Output")%>%
mutate(
across(everything(), ~replace_na(.x, 0))
)
df_names <- read_excel("globals.xlsx",
sheet = "Names") %>% rowid_to_column(var="ID")
labs<- read_excel("labs.xlsx",
sheet = "Labs") %>% rowid_to_column(var="ID")
categories<- read_excel("globals.xlsx", sheet = "Categories")
presets<- read_excel("globals.xlsx", sheet = "Presets")
dbWriteTable(mydb, "available", available, overwrite=TRUE)
dbWriteTable(mydb, "mandatory", mandatory, overwrite=TRUE)
dbWriteTable(mydb, "output_df", output_df, overwrite=TRUE)
dbWriteTable(mydb, "df_names", df_names, overwrite=TRUE)
dbWriteTable(mydb, "labs", labs, overwrite=TRUE)
dbWriteTable(mydb, "categories", categories, overwrite=TRUE)
dbWriteTable(mydb, "presets", presets, overwrite=TRUE)
dbDisconnect(mydb)
plumb(file='api.R')$run()
View(mandatory)
vel<-C(1,8,6,3,2,12)
vel<-c(1,8,6,3,2,12)
vel[1]
vel[-c(1,NA,3)]
vel[!vel %in% c(1, NA, 3)]
which(mandatory$Function==
"PrePost_to_MeanSD")
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
View(validated_df)
View(df)
View(df)
View(df)
library(plumber)
library(tidyverse)
library(uxstats)
library(jsonlite)
library(DBI)
library(readxl)
library(openxlsx)
library(meta)
library(utilities)
mydb <- dbConnect(RSQLite::SQLite(), "./routes/globals.sqlite")
#Prepare Labs
labs_raw <- read_excel("labs_raw.xlsx", sheet = "Sheet2")
write.xlsx(rbind(
labs_raw%>%transmute(Conversion= paste0(Analyte, " (",Traditional, "->", SI,")"), ratio=toSI),
labs_raw%>%transmute(Conversion= paste0(Analyte," (",SI,"->", Traditional,")"), ratio=toTraditional)
)%>%arrange(Conversion),file = "labs.xlsx", rowNames = FALSE, sheetName="Labs")
#Create db from globals.xlsx
available <- read_excel("globals.xlsx",
sheet = "Input") %>%
mutate(
across(everything(), ~replace_na(.x, 0))
)
mandatory <- read_excel("globals.xlsx",
sheet = "Mandatory") %>%
mutate(
across(everything(), ~replace_na(.x, 0))
) %>% rowid_to_column(var="ID")
output_df <- read_excel("globals.xlsx",
sheet = "Output")%>%
mutate(
across(everything(), ~replace_na(.x, 0))
)
df_names <- read_excel("globals.xlsx",
sheet = "Names") %>% rowid_to_column(var="ID")
labs<- read_excel("labs.xlsx",
sheet = "Labs") %>% rowid_to_column(var="ID")
categories<- read_excel("globals.xlsx", sheet = "Categories")
presets<- read_excel("globals.xlsx", sheet = "Presets")
dbWriteTable(mydb, "available", available, overwrite=TRUE)
dbWriteTable(mydb, "mandatory", mandatory, overwrite=TRUE)
dbWriteTable(mydb, "output_df", output_df, overwrite=TRUE)
dbWriteTable(mydb, "df_names", df_names, overwrite=TRUE)
dbWriteTable(mydb, "labs", labs, overwrite=TRUE)
dbWriteTable(mydb, "categories", categories, overwrite=TRUE)
dbWriteTable(mydb, "presets", presets, overwrite=TRUE)
dbDisconnect(mydb)
plumb(file='api.R')$run()
plumb(file='api.R')$run()
dr<-data.frame()
dr<-data.frame(ch=double())
dr%>%mutate(ch=1)
View(output_df)
View(output_df)
plumb(file='api.R')$run()
1:nrow(valid_rows)
seq(1,0,1)
seq(1,0,by=1)
plumb(file='api.R')$run()
View(out_df)
View(pre_group)
cbind(pre_group,postMean=post_group$postMean, postSD=post_group$postSD)
cbind(pre_group,postMean=post_group$postMean, postSD=post_group$postSD)%>%mutate(invalid=0)
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
split_df_prepost(itm)
append(output_study_list, split_df_prepost(itm))
plumb(file='api.R')$run()
plumb(file='api.R')$run()
library(plumber)
library(tidyverse)
library(uxstats)
library(jsonlite)
library(DBI)
library(readxl)
library(openxlsx)
library(meta)
library(utilities)
mydb <- dbConnect(RSQLite::SQLite(), "./routes/globals.sqlite")
#Prepare Labs
labs_raw <- read_excel("labs_raw.xlsx", sheet = "Sheet2")
write.xlsx(rbind(
labs_raw%>%transmute(Conversion= paste0(Analyte, " (",Traditional, "->", SI,")"), ratio=toSI),
labs_raw%>%transmute(Conversion= paste0(Analyte," (",SI,"->", Traditional,")"), ratio=toTraditional)
)%>%arrange(Conversion),file = "labs.xlsx", rowNames = FALSE, sheetName="Labs")
#Create db from globals.xlsx
available <- read_excel("globals.xlsx",
sheet = "Input") %>%
mutate(
across(everything(), ~replace_na(.x, 0))
)
mandatory <- read_excel("globals.xlsx",
sheet = "Mandatory") %>%
mutate(
across(everything(), ~replace_na(.x, 0))
) %>% rowid_to_column(var="ID")
output_df <- read_excel("globals.xlsx",
sheet = "Output")%>%
mutate(
across(everything(), ~replace_na(.x, 0))
)
df_names <- read_excel("globals.xlsx",
sheet = "Names") %>% rowid_to_column(var="ID")
labs<- read_excel("labs.xlsx",
sheet = "Labs") %>% rowid_to_column(var="ID")
categories<- read_excel("globals.xlsx", sheet = "Categories")
presets<- read_excel("globals.xlsx", sheet = "Presets")
dbWriteTable(mydb, "available", available, overwrite=TRUE)
dbWriteTable(mydb, "mandatory", mandatory, overwrite=TRUE)
dbWriteTable(mydb, "output_df", output_df, overwrite=TRUE)
dbWriteTable(mydb, "df_names", df_names, overwrite=TRUE)
dbWriteTable(mydb, "labs", labs, overwrite=TRUE)
dbWriteTable(mydb, "categories", categories, overwrite=TRUE)
dbWriteTable(mydb, "presets", presets, overwrite=TRUE)
dbDisconnect(mydb)
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
View(valid_prepost)
View(prepared_df)
plumb(file='api.R')$run()
View(output_study_list)
plumb(file='api.R')$run()
plumb(file='api.R')$run()
